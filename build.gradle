plugins {
    id 'application'
}

version '1.0-SNAPSHOT'

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// since there's no code in the default src/test/java folder
// modify the target directory to src/main/java
sourceSets {
    test {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

// if we don't have this setup
// by default all the test tasks would be executed automatically right after compiling
// but we want to decide our own tasks-executing orders
test {
    exclude '**/*'
}

dependencies {
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'net.lightbody.bmp:browsermob-core:2.1.5'
    implementation 'net.lightbody.bmp:browsermob-proxy:2.1.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'io.github.bonigarcia:webdrivermanager:4.2.0'
    implementation 'junit:junit:4.12'
    implementation 'io.cucumber:cucumber-java:5.4.0'

    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'commons-io:commons-io:2.6'
    implementation 'io.cucumber:cucumber-java:5.4.0'
    implementation 'io.cucumber:cucumber-junit:5.4.0'
    implementation 'com.github.deersheep330:WebDriverWrapper:-SNAPSHOT'
}

application {
    mainClassName = 'automation.preprocess.Preprocess'
}

// don't have to explicitly call this task
// this task would be run automatically before compiling source files
// that is: this task is the first task being called when gradle runs
task setupEnv(type: WriteProperties) {

    String browserVar = project.hasProperty('browser') ? browser : 'Chrome'
    String envVar = project.hasProperty('env') ? env : 'UAT'
    String machineVar = project.hasProperty('machine') ? machine : 'remote'

    println '==> Test Browser: ' + browserVar
    println '==> Test Environment: ' + envVar
    println '==> Test Machine: ' + machineVar

    def propertiesFilePath = 'src/main/resources/environment.properties'
    def propFile
    if (!file(propertiesFilePath).exists()) {
        propFile = new File(propertiesFilePath)
    }
    else {
        propFile = file(propertiesFilePath)
    }
    property('browser', browserVar)
    property('env', envVar)
    property('machine', machineVar)
    setOutputFile(propFile)
    writeProperties()

    println '==> Set Properties OK!'
}

task testPortal(type: Test) {
    group = 'regression'
    testLogging.showStandardStreams = true
    ignoreFailures = true
    include '**/PortalTestRunner.class'
}

task copyTestResults(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = 'automation.postprocess.Postprocess'
}


